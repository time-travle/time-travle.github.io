springboot性能优化
    一、扫描优化
        SpringBoot项目中的启动类，会使用@SpringBootApplication 注解，该注解的作用扫描外部依赖项目（例如：Tomcat，SpringMVC，Transaction等）
        以及运行一些自动配置类。

        @SpringBootApplication注解中包含了@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan等等，通过以下配置
        
        使用 @import注解直接引入需要的 减去扫描时间
        
    二、JVM参数调优
        先了解两个配置指令

        （1）-Xmx:设置最大的java堆大小

        （2） -Xms:设置Java堆栈的初始化大小

    三、根据项目采用合适的容器
        现在最流行也最常用的就是tomcat容器，tomcat是默认支持jsp的，当然也可以去优化tomcat，关闭tomcat对jsp的支持。
        如果不优化tomcat也可以在项目中更换使用其他容器，例如：Undertow，该容器默认是不支持jsp。减少一些其他不需要的支持来提升容器启动和运行效率。



Spring clould 调优
第一步：熔断器并发调优
    首先想到的是Feign调用并发过大，导致的熔断问题，优化服务A中的熔断配置
    hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests 如果并发数达到该设置值，请求会被拒绝和抛出异常并且fallback不会被调用。
    默认10
第二步：Zuul并发调优
    经历了将熔断器执行线程并发设置为500后，继续用JMeter进行并发测试，结果QPS到达100后，又出现大量请求失败。
    查看日志，发现zuul很多请求连接关闭。

    优化配置：

    # zuul网关配置
    zuul.semaphore.max-semaphores=500




系统说下spring cloud工程调优的问题 https://blog.csdn.net/xiaolyuh123/article/details/106967193
    主要从以下几个方面入手：
    1、hystrix熔断器并发调优
    2、zuul网关的并发参数控制
    3、Feign客户端和连接数参数调优
    4、Tomcat并发连接数调优
    5、timeout超时参数调优
    6、JVM参数调优
    7、ribbon和hystrix的请求超时，重试以及幂等性配置
