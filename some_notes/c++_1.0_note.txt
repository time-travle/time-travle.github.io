C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：
	封装
	抽象
	继承
	多态

标准的 C++ 由三个重要部分组成：
	核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。
	C++ 标准库，提供了大量的函数，用于操作文件、字符串等。
	标准模板库（STL），提供了大量的方法，用于操作数据结构等。

C++ 的使用
	基本上每个应用程序领域的程序员都有使用 C++。
	C++ 通常用于编写设备驱动程序和其他要求实时性的直接操作硬件的软件。
	C++ 广泛用于教学和研究。
	任何一个使用苹果电脑或 Windows PC 机的用户都在间接地使用 C++，因为这些系统的主要用户接口是使用 C++ 编写的。

Windows 上的安装 运行环境
	为了在 Windows 上安装 GCC，您需要安装 MinGW。为了安装 MinGW，请访问 MinGW 的主页 www.mingw.org，进入 MinGW 下载页面，
	下载最新版本的 MinGW 安装程序，命名格式为 MinGW-<version>.exe。
	当安装 MinGW 时，您至少要安装 gcc-core、gcc-g++、binutils 和 MinGW runtime，但是一般情况下都会安装更多其他的项。
	添加您安装的 MinGW 的 bin 子目录到您的 PATH 环境变量中，这样您就可以在命令行中通过简单的名称来指定这些工具。
	当完成安装时，您可以从 Windows 命令行上运行 gcc、g++、ar、ranlib、dlltool 和其他一些 GNU 工具。


使用命令运行程序：
	$ g++ fileName.cpp
	
	demo:
		在文件 helloworld.cpp 中一个简单的 C++ 程序的代码：

		#include <iostream>
		using namespace std;
		int main()
		{
			cout << "Hello, world!" << endl;
			return 0;
		}
		最简单的编译方式：

		$ g++ helloworld.cpp
		由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：

		$ ./a.out
		Hello, world!
		通常我们使用 -o 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：

		$ g++ helloworld.cpp -o helloworld
		执行 helloworld:

		$ ./helloworld
		Hello, world!
		如果是多个 C++ 代码文件，如 runoob1.cpp、runoob2.cpp，编译命令如下：

		$ g++ runoob1.cpp runoob2.cpp -o runoob
		生成一个 runoob 可执行文件。

		g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：

		g++ -g -Wall -std=c++11 main.cpp

g++ 常用命令选项
	选项	解释
	-ansi	只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。
	-c	只编译并生成目标文件。
	-DMACRO	以字符串"1"定义 MACRO 宏。
	-DMACRO=DEFN	以字符串"DEFN"定义 MACRO 宏。
	-E	只运行 C 预编译器。
	-g	生成调试信息。GNU 调试器可利用该信息。
	-IDIRECTORY	指定额外的头文件搜索路径DIRECTORY。
	-LDIRECTORY	指定额外的函数库搜索路径DIRECTORY。
	-lLIBRARY	连接时搜索指定的函数库LIBRARY。
	-m486	针对 486 进行代码优化。
	-o	FILE 生成指定的输出文件。用在生成可执行文件时。
	-O0	不进行优化处理。
	-O	或 -O1 优化生成代码。
	-O2	进一步优化。
	-O3	比 -O2 更进一步优化，包括 inline 函数。
	-shared	生成共享目标文件。通常用在建立共享库时。
	-static	禁止使用共享连接。
	-UMACRO	取消对 MACRO 宏的定义。
	-w	不生成任何警告信息。
	-Wall	生成所有警告信息。


在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束
C++ 不以行末作为结束符的标识，因此，可以在一行上放置多个语句

C++ 中的空格
	只包含空格的行，被称为空白行，可能带有注释，C++ 编译器会完全忽略它。
	在 C++ 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，
	下一个元素在哪里开始

typedef 声明
	您可以使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：

	typedef type newname; 
		例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：

		typedef int feet;
		现在，下面的声明是完全合法的，它创建了一个整型变量 distance：

		feet distance;

C++ 函数
函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 main() ，所有简单的程序都可以定义其他额外的函数
函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。

	定义函数
		C++ 中的函数定义的一般形式如下：

		return_type function_name( parameter list )
		{
		   body of the function
		}
		一个函数的所有组成部分：

		返回类型：一个函数可以返回一个值。return_type 是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，
			return_type 是关键字 void。
		函数名称：这是函数的实际名称。函数名和参数列表一起构成了函数签名。
		参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。
			参数是可选的，也就是说，函数可能不包含参数。
		函数主体：函数主体包含一组定义函数执行任务的语句。

	函数声明
		函数声明会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。

		函数声明包括以下几个部分：

		return_type function_name( parameter list );

	函数参数
		如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数。

		形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。

		当调用函数时，有三种向函数传递参数的方式：

		调用类型	描述
		传值调用	该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。
		指针调用	该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。
		引用调用	该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。
		默认情况下，C++ 使用传值调用来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的参数。

指针？
	指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址
	指针变量声明的一般形式为：

	type *var-name;
















