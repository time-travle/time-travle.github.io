String 转 list
		//字符串转list<String>
        String str = "asdfghjkl";
        List<String> lis = Arrays.asList(str.split(""));
		
Integer转String 
	//方法一:Integer类的静态方法toString()
	Integer a = 2;
	String str = Integer.toString(a)
	 
	//方法二:Integer类的成员方法toString()
	Integer a = 2;
	String str = a.toString();
	 
	//方法三:String类的静态方法valueOf()
	Integer a = 2;
	String str = String.valueOf(a);

String转Integer
	Integer.valueOf(str);
	
判断一个字符是不是数字
	
	工具包 判断一个字符串是不是全是数字组成
	org.apache.commons.lang.StringUtils.isNumeric()
	 
	
	// 该正则表达式可以匹配所有的数字 包括负数
        Pattern pattern = Pattern.compile("-?[0-9]+\\.?[0-9]*");
        String bigStr;
		Matcher isNum = pattern.matcher(bigStr); // matcher是全匹配
		isNum.matches()
		
		Pattern pattern = Pattern.compile("^[-\\+]?[\\d]*$");  
		return pattern.matcher(str).matches();
			
		Pattern pattern = Pattern.compile("[0-9]*");
		return pattern.matcher(str).matches(); 
		
	通过BigDecimal 转化
	String str	
	new BigDecimal(str).toString(); 是否抛出异常 抛出就不全是数字	
	
	只能判断正整数
	for (int i = str.length();--i>=0;){  
        if (!Character.isDigit(str.charAt(i))){
            return false;
        }
    }
	
	用ascii码
	for(int i=str.length();--i>=0;){
        int chr=str.charAt(i);
        if(chr<48 || chr>57)
            return false;
    }
 
 
indexOf 和 lastIndexOf的区别
    indexOf 和  lastIndexOf 是什么？
    　　indexOf 和 lastIndexOf 都是索引文件
    　　indexOf 是查某个指定的字符串在字符串首次出现的位置（索引值）（从左往右）
           lastIndexOf 是查某个指定的字符串在字符串最后一次出现的位置（索引值）（从右往左）
           eg：    
            var a="asdfghjkl"
            a.indexOf("d") // 2
            a.lastIndexOf("d") // 2

    注意：　　
            接下来在看一个例子：
            var a="asdddfghjkl"
            a.indexOf("d") // 2
            a.lastIndexOf("d") // 4
            

    　　　这个时候两个返回的索引值就不同了
     

    总结：
    　　　当数组（字符串）中所要查询的数（字符串/字符）在字符串（数组）中只出现一次的时候 二者返回的索引值相同
    　　　当数组（字符串）中所要查询的数（字符串/字符）在字符串（数组）中出现两次及以上的时候  
    　　　　　　indexOf  返回的是 valuesearch 第一次在数组（字符串）出现的位置（从左往右）
    　　　　　　lastIndexOf 返回的是 valuesearch 最后一次在数组（字符串）出现的位置（从右往左）
    补充说明

    定义：lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。

    * lastIndexOf()方法虽然是从后往前搜索，但返回的位置是从前开始数的
    
    
    



