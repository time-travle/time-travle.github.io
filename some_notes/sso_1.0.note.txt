单点登录英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统


CAS官网上的标准流程，具体流程如下：

    用户访问app系统，app系统是需要登录的，但用户现在没有登录。
    跳转到CAS server，即SSO登录系统，以后图中的CAS Server我们统一叫做SSO系统。 SSO系统也没有登录，弹出用户登录页。
    用户填写用户名、密码，SSO系统进行认证后，将登录状态写入SSO的session，浏览器（Browser）中写入SSO域下的Cookie。
    SSO系统登录完成后会生成一个ST（Service Ticket），然后跳转到app系统，同时将ST作为参数传递给app系统。
    app系统拿到ST后，从后台向SSO发送请求，验证ST是否有效。
    验证通过后，app系统将登录状态写入session并设置app域下的Cookie。
    
    至此，跨域单点登录就完成了。以后我们再访问app系统时，app就是登录的。接下来，我们再看看访问app2系统时的流程。

    用户访问app2系统，app2系统没有登录，跳转到SSO。
    由于SSO已经登录了，不需要重新登录认证。
    SSO生成ST，浏览器跳转到app2系统，并将ST作为参数传递给app2。
    app2拿到ST，后台访问SSO，验证ST是否有效。
    验证成功后，app2将登录状态写入session，并在app2域下写入Cookie。
    
    这样，app2系统不需要走登录流程，就已经是登录了。SSO，app和app2在不同的域，它们之间的session不共享也是没问题的。



SSO系统登录后，跳回原业务系统时，带了个参数ST，业务系统还要拿ST再次访问SSO进行验证，觉得这个步骤有点多余。
他想SSO登录认证通过后，通过回调地址将用户信息返回给原业务系统，原业务系统直接设置登录状态，这样流程简单，也完成了登录，不是很好吗？
其实这样问题时很严重的，如果我在SSO没有登录，而是直接在浏览器中敲入回调的地址，并带上伪造的用户信息，是不是业务系统也认为登录了呢？这是很可怕的。



单点登录要做的事情：
    单点登录（SSO系统）是保障各业务系统的用户资源的安全 。
    各个业务系统获得的信息是，这个用户能不能访问我的资源。
    单点登录，资源都在各个业务系统这边，不在SSO那一方。 用户在给SSO服务器提供了用户名密码后，作为业务系统并不知道这件事。 SSO随便给业务系统一个ST，那么业务系统是不能确定这个ST是用户伪造的，还是真的有效，所以要拿着这个ST去SSO服务器再问一下，这个用户给我的ST是否有效，是有效的我才能让这个用户访问

    作者：牛初九
    链接：https://www.jianshu.com/p/75edcc05acfd
    来源：简书
    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。




服务器在内存中保存会话对象，浏览器怎么保存会话id呢？你可能会想到两种方式
    请求参数
    cookie


https://blog.csdn.net/xiaoguan_liu/article/details/91492110
SSO的实现
　　只是简要介绍下基于java的实现过程，不提供完整源码，明白了原理，我相信你们可以自己实现。sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）

　　sso-client

        拦截子系统未登录用户请求，跳转至sso认证中心
        接收并存储sso认证中心发送的令牌
        与sso-server通信，校验令牌的有效性
        建立局部会话
        拦截用户注销请求，向sso认证中心发送注销请求
        接收sso认证中心发出的注销请求，销毁局部会话
        　
    sso-server

        验证用户的登录信息
        创建全局会话
        创建授权令牌
        与sso-client通信发送令牌
        校验sso-client令牌有效性
        系统注册
        接收sso-client注销请求，注销所有会话
        